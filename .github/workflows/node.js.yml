# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
    
env:
  PROJECT_NAME: theheraclass
  BUCKET_NAME: terrarossa
  CODE_DEPLOY_APP_NAME: code
  DEPLOYMENT_GROUP_NAME: codecode

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 16.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    
    - name: 빌드한 코드를 압축
        #run: zip -r kcm.zip ./dist ./scripts ./appspec.yml ./.env ./package.json
      run: zip -r kcm.zip ./ -x "*.zip"

    - name: AWS에 접속
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_CD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_CD_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: S3에 압축된 서버 코드를 업로드
      run: aws s3 cp --region ap-northeast-2 ./kcm.zip s3://terrarossa/deploy/

    - name: AWS codeDeploy로 배포를 시작
      run: aws deploy create-deployment
          --application-name code
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name codecode
          --s3-location bucket=terrarossa,bundleType=zip,key=deploy/kcm.zip
